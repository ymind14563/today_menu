name: Daily Menu Crawler

on:
  schedule:
    # UTC 00:00~01:30 = KST 09:00~10:30 (30분, 월 ~ 금)
    - cron: '0,30 0-1 * * 1-5'

    # UTC 02:00~02:50 = KST 11:00~11:50 (10분, 월 ~ 금)
    - cron: '0,10,20,30,40,50 2 * * 1-5'

    # UTC 03:00~03:30 = KST 12:00~12:30 (5분, 월 ~ 금)
    - cron: '0,5,10,15,20,25,30 3 * * 1-5'

  workflow_dispatch:

jobs:
  crawl-and-deploy:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Seoul

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.TODAY_MENU_TOKEN }}

      - name: 크롤링 필요 여부 확인
        id: check
        run: |
          echo "last_urls.json 조회 중..."
          TODAY=$(date '+%Y-%m-%d')
          echo "오늘 날짜: $TODAY"

          if [ ! -f last_urls.json ]; then
            echo "last_urls.json 파일이 없음. 크롤링 수행 필요."
            echo "run-crawler=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          N_Date=$(jq -r '.naver.saved_date // ""' last_urls.json)
          K_Date=$(jq -r '.kakao.saved_date // ""' last_urls.json)

          echo "N_Date=$N_Date"
          echo "K_Date=$K_Date"

          if [[ "$N_Date" == "$TODAY"* && "$K_Date" == "$TODAY"* ]]; then
            echo "두 메뉴 모두 오늘자로 저장되어 있습니다. 크롤링 생략."
            echo "run-crawler=false" >> $GITHUB_OUTPUT
          else
            echo "하나 이상 오늘자 아님 → 크롤링 필요"
            echo "run-crawler=true" >> $GITHUB_OUTPUT
          fi

      - name: Python 세팅
        if: steps.check.outputs.run-crawler == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: dependencies 설치 (requirements.txt)
        if: steps.check.outputs.run-crawler == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 크롤링 시작
        if: steps.check.outputs.run-crawler == 'true'
        run: |
          python menu_crawler/main.py

      - name: git push, html 업데이트
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          git add docs/

          # 기존 grep은 삭제된 줄 포함 + 부분 문자열 탐지였기 때문에 오탐 => 정규식으로 보완
          # ^ : 라인 시작,  \+ : git diff에서 추가된 줄만 탐지 (라인 앞에 '+' 붙음), .*"url": / .*"saved_date": : 해당 키가 포함된 라인인지 확인
          # 반드시 "추가된 줄" 중에 "url" 또는 "saved_date"가 들어간 경우만 감지해야함
          if git diff --cached docs/last_urls.json | grep -qE '^\+.*"url":|^\+.*"saved_date":'; then
            echo "주요 사항 변경"
            git config --global user.name "ymind14563"
            git config --global user.email "ymind14563@gmail.com"
            git commit -m "update: $(date '+%Y-%m-%d %H:%M')"
          else
            echo "last_checked 변경"
            git commit -m "chore: last_checked ($(date '+%Y-%m-%d %H:%M'))"
          fi

          git push
  
        
